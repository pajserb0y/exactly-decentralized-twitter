{
  "address": "0xc69b9a9d2B0acde6E9e0f67cBb5eC0e30E540545",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Exactly__CanNotTipToYouself",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Exactly__MustOwnNftToPost",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Exactly__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Exactly__PostCanNotBeEmpty",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Exactly__PostWithThatIdDoesntExist",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Exactly__TipAmountIsNotEnough",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "hashContent",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tipAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "author",
          "type": "address"
        }
      ],
      "name": "Exactly__PostCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "hashContent",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tipAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address payable",
          "name": "author",
          "type": "address"
        }
      ],
      "name": "Exactly__PostTipped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPosts",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "hashContent",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "tipAmount",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "author",
              "type": "address"
            }
          ],
          "internalType": "struct Exactly.Post[]",
          "name": "_posts",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMyNfts",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "postCount",
          "type": "uint256"
        }
      ],
      "name": "getPost",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "hashContent",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "tipAmount",
              "type": "uint256"
            },
            {
              "internalType": "address payable",
              "name": "author",
              "type": "address"
            }
          ],
          "internalType": "struct Exactly.Post",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPostCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "profile",
          "type": "address"
        }
      ],
      "name": "getTokenIdForProfile",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "setProfile",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_postId",
          "type": "uint256"
        }
      ],
      "name": "tipPost",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_postHash",
          "type": "string"
        }
      ],
      "name": "uploadPost",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x73c301e15781ca9167761c7c155a255ea8653c5bb76bb7880b76a7330cc1bb8b",
  "receipt": {
    "to": null,
    "from": "0x250932Dc939057608459D81646A1dfA9efE45B67",
    "contractAddress": "0xc69b9a9d2B0acde6E9e0f67cBb5eC0e30E540545",
    "transactionIndex": 45,
    "gasUsed": "3289893",
    "logsBloom": "0x
    "blockHash": "0x3a910e462a964da83c2c021340a6fc43534b0a5d6adbc7c82d7640128e04d86d",
    "transactionHash": "0x73c301e15781ca9167761c7c155a255ea8653c5bb76bb7880b76a7330cc1bb8b",
    "logs": [],
    "blockNumber": 11226452,
    "cumulativeGasUsed": "29083552",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "f901a5a8f4d35dc56ebe79ceef962b0b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Exactly__CanNotTipToYouself\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Exactly__MustOwnNftToPost\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Exactly__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Exactly__PostCanNotBeEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Exactly__PostWithThatIdDoesntExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Exactly__TipAmountIsNotEnough\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hashContent\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"author\",\"type\":\"address\"}],\"name\":\"Exactly__PostCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"hashContent\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address payable\",\"name\":\"author\",\"type\":\"address\"}],\"name\":\"Exactly__PostTipped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPosts\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"hashContent\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"author\",\"type\":\"address\"}],\"internalType\":\"struct Exactly.Post[]\",\"name\":\"_posts\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyNfts\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"postCount\",\"type\":\"uint256\"}],\"name\":\"getPost\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"hashContent\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tipAmount\",\"type\":\"uint256\"},{\"internalType\":\"address payable\",\"name\":\"author\",\"type\":\"address\"}],\"internalType\":\"struct Exactly.Post\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPostCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"profile\",\"type\":\"address\"}],\"name\":\"getTokenIdForProfile\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"setProfile\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_postId\",\"type\":\"uint256\"}],\"name\":\"tipPost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_postHash\",\"type\":\"string\"}],\"name\":\"uploadPost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Exactly.sol\":\"Exactly\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/Exactly.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\n\\nerror Exactly__NotOwner();\\nerror Exactly__MustOwnNftToPost();\\nerror Exactly__PostCanNotBeEmpty();\\nerror Exactly__PostWithThatIdDoesntExist();\\nerror Exactly__CanNotTipToYouself();\\nerror Exactly__TipAmountIsNotEnough();\\n\\ncontract Exactly is ERC721URIStorage {\\n    uint256 private s_tokenCount;\\n    uint256 private s_postCount;\\n\\n    // postCount -> post\\n    mapping(uint256 => Post) private s_postCountToPost;\\n    //profile address->nft id\\n    mapping(address => uint256) private s_profileToTokenId;\\n\\n    struct Post {\\n        uint256 id;\\n        string hashContent; //IPFS address of post metadata\\n        uint256 tipAmount;\\n        address payable author;\\n    }\\n\\n    event Exactly__PostCreated(\\n        uint256 id,\\n        string hashContent,\\n        uint256 tipAmount,\\n        address payable author\\n    );\\n    event Exactly__PostTipped(\\n        uint256 id,\\n        string hashContent,\\n        uint256 tipAmount,\\n        address payable author\\n    );\\n\\n    constructor() ERC721(\\\"Exactly\\\", \\\"EXC\\\") {}\\n\\n    function mint(string memory _tokenURI) external returns (uint256) {\\n        s_tokenCount++;\\n        _safeMint(msg.sender, s_tokenCount);\\n        _setTokenURI(s_tokenCount, _tokenURI);\\n        setProfile(s_tokenCount);\\n        return s_tokenCount;\\n    }\\n\\n    function setProfile(uint256 _tokenId) public {\\n        if (msg.sender != ownerOf(_tokenId)) revert Exactly__NotOwner();\\n        s_profileToTokenId[msg.sender] = _tokenId;\\n    }\\n\\n    function uploadPost(string memory _postHash) external {\\n        if (balanceOf(msg.sender) <= 0) revert Exactly__MustOwnNftToPost();\\n\\n        if (bytes(_postHash).length <= 0) revert Exactly__PostCanNotBeEmpty();\\n\\n        s_postCount++;\\n\\n        s_postCountToPost[s_postCount] = Post(s_postCount, _postHash, 0, payable(msg.sender));\\n\\n        emit Exactly__PostCreated(s_postCount, _postHash, 0, payable(msg.sender));\\n    }\\n\\n    function tipPost(uint256 _postId) external payable {\\n        if (_postId < 0 || _postId > s_postCount) revert Exactly__PostWithThatIdDoesntExist();\\n\\n        if (msg.value <= 0) revert Exactly__TipAmountIsNotEnough();\\n\\n        Post memory _post = s_postCountToPost[_postId];\\n\\n        if (msg.sender == _post.author) revert Exactly__CanNotTipToYouself();\\n\\n        _post.author.transfer(msg.value); //not best practise to change state variables after external function but transfer is considered safe from re-entrancy because it always forwards 2300 gas\\n\\n        _post.tipAmount = _post.tipAmount + msg.value;\\n\\n        s_postCountToPost[_postId] = _post;\\n\\n        emit Exactly__PostTipped(_postId, _post.hashContent, _post.tipAmount, _post.author);\\n    }\\n\\n    function getAllPosts() external view returns (Post[] memory _posts) {\\n        _posts = new Post[](s_postCount);\\n        for (uint256 i = 0; i < s_postCount; i++) {\\n            _posts[i] = s_postCountToPost[i + 1];\\n        }\\n    }\\n\\n    function getMyNfts() external view returns (uint256[] memory _tokenIds) {\\n        _tokenIds = new uint256[](balanceOf(msg.sender));\\n        uint256 _currIndex = 0;\\n        for (uint256 i = 1; i <= s_tokenCount; i++) {\\n            if (ownerOf(i) == msg.sender) {\\n                _tokenIds[_currIndex] = i;\\n                _currIndex++;\\n            }\\n        }\\n    }\\n\\n    function getTokenCount() public view returns (uint256) {\\n        return s_tokenCount;\\n    }\\n\\n    function getPostCount() public view returns (uint256) {\\n        return s_tokenCount;\\n    }\\n\\n    function getPost(uint256 postCount) public view returns (Post memory) {\\n        return s_postCountToPost[postCount];\\n    }\\n\\n    function getTokenIdForProfile(address profile) public view returns (uint256) {\\n        return s_profileToTokenId[profile]; //returns nftId for user\\n    }\\n}\\n\",\"keccak256\":\"0x2aa60a9cc0a6687499697c56e3954978f06edb04692ce39d66259fa3bdb23471\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040518060400160405280600781526020017f45786163746c79000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f4558430000000000000000000000000000000000000000000000000000000000815250816000908051906020019062000096929190620000b8565b508060019080519060200190620000af929190620000b8565b505050620001cd565b828054620000c69062000168565b90600052602060002090601f016020900481019282620000ea576000855562000136565b82601f106200010557805160ff191683800117855562000136565b8280016001018555821562000136579182015b828111156200013557825182559160200191906001019062000118565b5b50905062000145919062000149565b5090565b5b80821115620001645760008160009055506001016200014a565b5090565b600060028204905060018216806200018157607f821691505b602082108114156200019857620001976200019e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6139e780620001dd6000396000f3fe6080604052600436106101405760003560e01c806370a08231116100b6578063b88d4fde1161006f578063b88d4fde14610473578063bcc954071461049c578063bdd05adb146104c7578063c87b56dd146104f0578063d85d3d271461052d578063e985e9c51461056a57610140565b806370a082311461037257806374d3c1f8146103af57806378a89567146103cb57806385d3cb37146103f657806395d89b411461041f578063a22cb4651461044a57610140565b806323b872dd1161010857806323b872dd1461023e578063305611001461026757806340731c241461029257806342842e0e146102cf5780636352211e146102f85780636938e5fa1461033557610140565b806301ffc9a714610145578063047b07bf1461018257806306fdde03146101ad578063081812fc146101d8578063095ea7b314610215575b600080fd5b34801561015157600080fd5b5061016c600480360381019061016791906128e2565b6105a7565b6040516101799190612f1b565b60405180910390f35b34801561018e57600080fd5b50610197610689565b6040516101a49190612ef9565b60405180910390f35b3480156101b957600080fd5b506101c26107be565b6040516101cf9190612f36565b60405180910390f35b3480156101e457600080fd5b506101ff60048036038101906101fa9190612975565b610850565b60405161020c9190612e70565b60405180910390f35b34801561022157600080fd5b5061023c600480360381019061023791906128a6565b610896565b005b34801561024a57600080fd5b50610265600480360381019061026091906127a0565b6109ae565b005b34801561027357600080fd5b5061027c610a0e565b6040516102899190612ed7565b60405180910390f35b34801561029e57600080fd5b506102b960048036038101906102b49190612975565b610c1c565b6040516102c691906130d8565b60405180910390f35b3480156102db57600080fd5b506102f660048036038101906102f191906127a0565b610d45565b005b34801561030457600080fd5b5061031f600480360381019061031a9190612975565b610d65565b60405161032c9190612e70565b60405180910390f35b34801561034157600080fd5b5061035c6004803603810190610357919061273b565b610e17565b60405161036991906130fa565b60405180910390f35b34801561037e57600080fd5b506103996004803603810190610394919061273b565b610e60565b6040516103a691906130fa565b60405180910390f35b6103c960048036038101906103c49190612975565b610f18565b005b3480156103d757600080fd5b506103e0611261565b6040516103ed91906130fa565b60405180910390f35b34801561040257600080fd5b5061041d60048036038101906104189190612975565b61126b565b005b34801561042b57600080fd5b5061043461131f565b6040516104419190612f36565b60405180910390f35b34801561045657600080fd5b50610471600480360381019061046c919061286a565b6113b1565b005b34801561047f57600080fd5b5061049a600480360381019061049591906127ef565b6113c7565b005b3480156104a857600080fd5b506104b1611429565b6040516104be91906130fa565b60405180910390f35b3480156104d357600080fd5b506104ee60048036038101906104e99190612934565b611433565b005b3480156104fc57600080fd5b5061051760048036038101906105129190612975565b6115d5565b6040516105249190612f36565b60405180910390f35b34801561053957600080fd5b50610554600480360381019061054f9190612934565b6116e8565b60405161056191906130fa565b60405180910390f35b34801561057657600080fd5b50610591600480360381019061058c9190612764565b61172f565b60405161059e9190612f1b565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061067257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106825750610681826117c3565b5b9050919050565b606061069433610e60565b67ffffffffffffffff8111156106d3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156107015781602001602082028036833780820191505090505b509050600080600190505b60075481116107b9573373ffffffffffffffffffffffffffffffffffffffff1661073582610d65565b73ffffffffffffffffffffffffffffffffffffffff1614156107a6578083838151811061078b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505081806107a2906134f2565b9250505b80806107b1906134f2565b91505061070c565b505090565b6060600080546107cd9061348f565b80601f01602080910402602001604051908101604052809291908181526020018280546107f99061348f565b80156108465780601f1061081b57610100808354040283529160200191610846565b820191906000526020600020905b81548152906001019060200180831161082957829003601f168201915b5050505050905090565b600061085b8261182d565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108a182610d65565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610912576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090990613098565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610931611878565b73ffffffffffffffffffffffffffffffffffffffff161480610960575061095f8161095a611878565b61172f565b5b61099f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099690613038565b60405180910390fd5b6109a98383611880565b505050565b6109bf6109b9611878565b82611939565b6109fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f5906130b8565b60405180910390fd5b610a098383836119ce565b505050565b606060085467ffffffffffffffff811115610a52577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610a8b57816020015b610a78612521565b815260200190600190039081610a705790505b50905060005b600854811015610c185760096000600183610aac91906132fa565b815260200190815260200160002060405180608001604052908160008201548152602001600182018054610adf9061348f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0b9061348f565b8015610b585780601f10610b2d57610100808354040283529160200191610b58565b820191906000526020600020905b815481529060010190602001808311610b3b57829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050828281518110610bfa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508080610c10906134f2565b915050610a91565b5090565b610c24612521565b6009600083815260200190815260200160002060405180608001604052908160008201548152602001600182018054610c5c9061348f565b80601f0160208091040260200160405190810160405280929190818152602001828054610c889061348f565b8015610cd55780601f10610caa57610100808354040283529160200191610cd5565b820191906000526020600020905b815481529060010190602001808311610cb857829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b610d60838383604051806020016040528060008152506113c7565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0590613078565b60405180910390fd5b80915050919050565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ed1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec890612ff8565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000811080610f28575060085481115b15610f5f576040517f6d69e9ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003411610f99576040517f9d88b4b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006009600083815260200190815260200160002060405180608001604052908160008201548152602001600182018054610fd39061348f565b80601f0160208091040260200160405190810160405280929190818152602001828054610fff9061348f565b801561104c5780601f106110215761010080835404028352916020019161104c565b820191906000526020600020905b81548152906001019060200180831161102f57829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050806060015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611121576040517fc6cc468900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806060015173ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015801561116b573d6000803e3d6000fd5b5034816040015161117c91906132fa565b81604001818152505080600960008481526020019081526020016000206000820151816000015560208201518160010190805190602001906111bf92919061255f565b506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507fdd87ba58389c04b62ce26b73411af232bbb7ddf11368c03b9238f18a392348ec828260200151836040015184606001516040516112559493929190613161565b60405180910390a15050565b6000600754905090565b61127481610d65565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112d8576040517f99c6f40300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60606001805461132e9061348f565b80601f016020809104026020016040519081016040528092919081815260200182805461135a9061348f565b80156113a75780601f1061137c576101008083540402835291602001916113a7565b820191906000526020600020905b81548152906001019060200180831161138a57829003601f168201915b5050505050905090565b6113c36113bc611878565b8383611c35565b5050565b6113d86113d2611878565b83611939565b611417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140e906130b8565b60405180910390fd5b61142384848484611da2565b50505050565b6000600754905090565b600061143e33610e60565b11611475576040517f9d2ca2f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008151116114b0576040517f97a1d26100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600860008154809291906114c3906134f2565b919050555060405180608001604052806008548152602001828152602001600081526020013373ffffffffffffffffffffffffffffffffffffffff1681525060096000600854815260200190815260200160002060008201518160000155602082015181600101908051906020019061153d92919061255f565b506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507f03d0e272ff804e9024b222f7a73f0c1b2deba6c7be8917773bdf62fcb6c3850c600854826000336040516115ca9493929190613115565b60405180910390a150565b60606115e08261182d565b60006006600084815260200190815260200160002080546116009061348f565b80601f016020809104026020016040519081016040528092919081815260200182805461162c9061348f565b80156116795780601f1061164e57610100808354040283529160200191611679565b820191906000526020600020905b81548152906001019060200180831161165c57829003601f168201915b50505050509050600061168a611dfe565b90506000815114156116a05781925050506116e3565b6000825111156116d55780826040516020016116bd929190612e4c565b604051602081830303815290604052925050506116e3565b6116de84611e15565b925050505b919050565b6000600760008154809291906116fd906134f2565b919050555061170e33600754611e7d565b61171a60075483611e9b565b61172560075461126b565b6007549050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61183681611f0f565b611875576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186c90613078565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166118f383610d65565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061194583610d65565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806119875750611986818561172f565b5b806119c557508373ffffffffffffffffffffffffffffffffffffffff166119ad84610850565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166119ee82610d65565b73ffffffffffffffffffffffffffffffffffffffff1614611a44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3b90612f78565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aab90612fb8565b60405180910390fd5b611abf838383611f7b565b611aca600082611880565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b1a9190613381565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b7191906132fa565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611c30838383611f80565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611ca4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9b90612fd8565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611d959190612f1b565b60405180910390a3505050565b611dad8484846119ce565b611db984848484611f85565b611df8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611def90612f58565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611e208261182d565b6000611e2a611dfe565b90506000815111611e4a5760405180602001604052806000815250611e75565b80611e548461211c565b604051602001611e65929190612e4c565b6040516020818303038152906040525b915050919050565b611e978282604051806020016040528060008152506122c9565b5050565b611ea482611f0f565b611ee3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eda90613018565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611f0a92919061255f565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b6000611fa68473ffffffffffffffffffffffffffffffffffffffff16612324565b1561210f578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611fcf611878565b8786866040518563ffffffff1660e01b8152600401611ff19493929190612e8b565b602060405180830381600087803b15801561200b57600080fd5b505af192505050801561203c57506040513d601f19601f82011682018060405250810190612039919061290b565b60015b6120bf573d806000811461206c576040519150601f19603f3d011682016040523d82523d6000602084013e612071565b606091505b506000815114156120b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ae90612f58565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612114565b600190505b949350505050565b60606000821415612164576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506122c4565b600082905060005b6000821461219657808061217f906134f2565b915050600a8261218f9190613350565b915061216c565b60008167ffffffffffffffff8111156121d8577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561220a5781602001600182028036833780820191505090505b5090505b600085146122bd576001826122239190613381565b9150600a85612232919061353b565b603061223e91906132fa565b60f81b81838151811061227a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856122b69190613350565b945061220e565b8093505050505b919050565b6122d38383612347565b6122e06000848484611f85565b61231f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231690612f58565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156123b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ae90613058565b60405180910390fd5b6123c081611f0f565b15612400576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f790612f98565b60405180910390fd5b61240c60008383611f7b565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461245c91906132fa565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461251d60008383611f80565b5050565b6040518060800160405280600081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b82805461256b9061348f565b90600052602060002090601f01602090048101928261258d57600085556125d4565b82601f106125a657805160ff19168380011785556125d4565b828001600101855582156125d4579182015b828111156125d35782518255916020019190600101906125b8565b5b5090506125e191906125e5565b5090565b5b808211156125fe5760008160009055506001016125e6565b5090565b6000612615612610846131d2565b6131ad565b90508281526020810184848401111561262d57600080fd5b61263884828561344d565b509392505050565b600061265361264e84613203565b6131ad565b90508281526020810184848401111561266b57600080fd5b61267684828561344d565b509392505050565b60008135905061268d81613955565b92915050565b6000813590506126a28161396c565b92915050565b6000813590506126b781613983565b92915050565b6000815190506126cc81613983565b92915050565b600082601f8301126126e357600080fd5b81356126f3848260208601612602565b91505092915050565b600082601f83011261270d57600080fd5b813561271d848260208601612640565b91505092915050565b6000813590506127358161399a565b92915050565b60006020828403121561274d57600080fd5b600061275b8482850161267e565b91505092915050565b6000806040838503121561277757600080fd5b60006127858582860161267e565b92505060206127968582860161267e565b9150509250929050565b6000806000606084860312156127b557600080fd5b60006127c38682870161267e565b93505060206127d48682870161267e565b92505060406127e586828701612726565b9150509250925092565b6000806000806080858703121561280557600080fd5b60006128138782880161267e565b94505060206128248782880161267e565b935050604061283587828801612726565b925050606085013567ffffffffffffffff81111561285257600080fd5b61285e878288016126d2565b91505092959194509250565b6000806040838503121561287d57600080fd5b600061288b8582860161267e565b925050602061289c85828601612693565b9150509250929050565b600080604083850312156128b957600080fd5b60006128c78582860161267e565b92505060206128d885828601612726565b9150509250929050565b6000602082840312156128f457600080fd5b6000612902848285016126a8565b91505092915050565b60006020828403121561291d57600080fd5b600061292b848285016126bd565b91505092915050565b60006020828403121561294657600080fd5b600082013567ffffffffffffffff81111561296057600080fd5b61296c848285016126fc565b91505092915050565b60006020828403121561298757600080fd5b600061299584828501612726565b91505092915050565b60006129aa8383612d68565b905092915050565b60006129be8383612e2e565b60208301905092915050565b6129d3816133c7565b82525050565b6129e2816133c7565b82525050565b6129f1816133b5565b82525050565b6000612a0282613254565b612a0c818561329a565b935083602082028501612a1e85613234565b8060005b85811015612a5a5784840389528151612a3b858261299e565b9450612a4683613280565b925060208a01995050600181019050612a22565b50829750879550505050505092915050565b6000612a778261325f565b612a8181856132ab565b9350612a8c83613244565b8060005b83811015612abd578151612aa488826129b2565b9750612aaf8361328d565b925050600181019050612a90565b5085935050505092915050565b612ad3816133d9565b82525050565b6000612ae48261326a565b612aee81856132bc565b9350612afe81856020860161345c565b612b0781613628565b840191505092915050565b612b1b8161343b565b82525050565b6000612b2c82613275565b612b3681856132cd565b9350612b4681856020860161345c565b612b4f81613628565b840191505092915050565b6000612b6582613275565b612b6f81856132de565b9350612b7f81856020860161345c565b612b8881613628565b840191505092915050565b6000612b9e82613275565b612ba881856132ef565b9350612bb881856020860161345c565b80840191505092915050565b6000612bd16032836132de565b9150612bdc82613639565b604082019050919050565b6000612bf46025836132de565b9150612bff82613688565b604082019050919050565b6000612c17601c836132de565b9150612c22826136d7565b602082019050919050565b6000612c3a6024836132de565b9150612c4582613700565b604082019050919050565b6000612c5d6019836132de565b9150612c688261374f565b602082019050919050565b6000612c806029836132de565b9150612c8b82613778565b604082019050919050565b6000612ca3602e836132de565b9150612cae826137c7565b604082019050919050565b6000612cc6603e836132de565b9150612cd182613816565b604082019050919050565b6000612ce96020836132de565b9150612cf482613865565b602082019050919050565b6000612d0c6018836132de565b9150612d178261388e565b602082019050919050565b6000612d2f6021836132de565b9150612d3a826138b7565b604082019050919050565b6000612d52602e836132de565b9150612d5d82613906565b604082019050919050565b6000608083016000830151612d806000860182612e2e565b5060208301518482036020860152612d988282612b21565b9150506040830151612dad6040860182612e2e565b506060830151612dc060608601826129ca565b508091505092915050565b6000608083016000830151612de36000860182612e2e565b5060208301518482036020860152612dfb8282612b21565b9150506040830151612e106040860182612e2e565b506060830151612e2360608601826129ca565b508091505092915050565b612e3781613431565b82525050565b612e4681613431565b82525050565b6000612e588285612b93565b9150612e648284612b93565b91508190509392505050565b6000602082019050612e8560008301846129e8565b92915050565b6000608082019050612ea060008301876129e8565b612ead60208301866129e8565b612eba6040830185612e3d565b8181036060830152612ecc8184612ad9565b905095945050505050565b60006020820190508181036000830152612ef181846129f7565b905092915050565b60006020820190508181036000830152612f138184612a6c565b905092915050565b6000602082019050612f306000830184612aca565b92915050565b60006020820190508181036000830152612f508184612b5a565b905092915050565b60006020820190508181036000830152612f7181612bc4565b9050919050565b60006020820190508181036000830152612f9181612be7565b9050919050565b60006020820190508181036000830152612fb181612c0a565b9050919050565b60006020820190508181036000830152612fd181612c2d565b9050919050565b60006020820190508181036000830152612ff181612c50565b9050919050565b6000602082019050818103600083015261301181612c73565b9050919050565b6000602082019050818103600083015261303181612c96565b9050919050565b6000602082019050818103600083015261305181612cb9565b9050919050565b6000602082019050818103600083015261307181612cdc565b9050919050565b6000602082019050818103600083015261309181612cff565b9050919050565b600060208201905081810360008301526130b181612d22565b9050919050565b600060208201905081810360008301526130d181612d45565b9050919050565b600060208201905081810360008301526130f28184612dcb565b905092915050565b600060208201905061310f6000830184612e3d565b92915050565b600060808201905061312a6000830187612e3d565b818103602083015261313c8186612b5a565b905061314b6040830185612b12565b61315860608301846129d9565b95945050505050565b60006080820190506131766000830187612e3d565b81810360208301526131888186612b5a565b90506131976040830185612e3d565b6131a460608301846129d9565b95945050505050565b60006131b76131c8565b90506131c382826134c1565b919050565b6000604051905090565b600067ffffffffffffffff8211156131ed576131ec6135f9565b5b6131f682613628565b9050602081019050919050565b600067ffffffffffffffff82111561321e5761321d6135f9565b5b61322782613628565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061330582613431565b915061331083613431565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156133455761334461356c565b5b828201905092915050565b600061335b82613431565b915061336683613431565b9250826133765761337561359b565b5b828204905092915050565b600061338c82613431565b915061339783613431565b9250828210156133aa576133a961356c565b5b828203905092915050565b60006133c082613411565b9050919050565b60006133d282613411565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061344682613431565b9050919050565b82818337600083830152505050565b60005b8381101561347a57808201518184015260208101905061345f565b83811115613489576000848401525b50505050565b600060028204905060018216806134a757607f821691505b602082108114156134bb576134ba6135ca565b5b50919050565b6134ca82613628565b810181811067ffffffffffffffff821117156134e9576134e86135f9565b5b80604052505050565b60006134fd82613431565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156135305761352f61356c565b5b600182019050919050565b600061354682613431565b915061355183613431565b9250826135615761356061359b565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b61395e816133b5565b811461396957600080fd5b50565b613975816133d9565b811461398057600080fd5b50565b61398c816133e5565b811461399757600080fd5b50565b6139a381613431565b81146139ae57600080fd5b5056fea26469706673582212207bb66e26e1e4318c18b3e0ed6d282f47bbe9ef3f188409140d757e6c55e115fe64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106101405760003560e01c806370a08231116100b6578063b88d4fde1161006f578063b88d4fde14610473578063bcc954071461049c578063bdd05adb146104c7578063c87b56dd146104f0578063d85d3d271461052d578063e985e9c51461056a57610140565b806370a082311461037257806374d3c1f8146103af57806378a89567146103cb57806385d3cb37146103f657806395d89b411461041f578063a22cb4651461044a57610140565b806323b872dd1161010857806323b872dd1461023e578063305611001461026757806340731c241461029257806342842e0e146102cf5780636352211e146102f85780636938e5fa1461033557610140565b806301ffc9a714610145578063047b07bf1461018257806306fdde03146101ad578063081812fc146101d8578063095ea7b314610215575b600080fd5b34801561015157600080fd5b5061016c600480360381019061016791906128e2565b6105a7565b6040516101799190612f1b565b60405180910390f35b34801561018e57600080fd5b50610197610689565b6040516101a49190612ef9565b60405180910390f35b3480156101b957600080fd5b506101c26107be565b6040516101cf9190612f36565b60405180910390f35b3480156101e457600080fd5b506101ff60048036038101906101fa9190612975565b610850565b60405161020c9190612e70565b60405180910390f35b34801561022157600080fd5b5061023c600480360381019061023791906128a6565b610896565b005b34801561024a57600080fd5b50610265600480360381019061026091906127a0565b6109ae565b005b34801561027357600080fd5b5061027c610a0e565b6040516102899190612ed7565b60405180910390f35b34801561029e57600080fd5b506102b960048036038101906102b49190612975565b610c1c565b6040516102c691906130d8565b60405180910390f35b3480156102db57600080fd5b506102f660048036038101906102f191906127a0565b610d45565b005b34801561030457600080fd5b5061031f600480360381019061031a9190612975565b610d65565b60405161032c9190612e70565b60405180910390f35b34801561034157600080fd5b5061035c6004803603810190610357919061273b565b610e17565b60405161036991906130fa565b60405180910390f35b34801561037e57600080fd5b506103996004803603810190610394919061273b565b610e60565b6040516103a691906130fa565b60405180910390f35b6103c960048036038101906103c49190612975565b610f18565b005b3480156103d757600080fd5b506103e0611261565b6040516103ed91906130fa565b60405180910390f35b34801561040257600080fd5b5061041d60048036038101906104189190612975565b61126b565b005b34801561042b57600080fd5b5061043461131f565b6040516104419190612f36565b60405180910390f35b34801561045657600080fd5b50610471600480360381019061046c919061286a565b6113b1565b005b34801561047f57600080fd5b5061049a600480360381019061049591906127ef565b6113c7565b005b3480156104a857600080fd5b506104b1611429565b6040516104be91906130fa565b60405180910390f35b3480156104d357600080fd5b506104ee60048036038101906104e99190612934565b611433565b005b3480156104fc57600080fd5b5061051760048036038101906105129190612975565b6115d5565b6040516105249190612f36565b60405180910390f35b34801561053957600080fd5b50610554600480360381019061054f9190612934565b6116e8565b60405161056191906130fa565b60405180910390f35b34801561057657600080fd5b50610591600480360381019061058c9190612764565b61172f565b60405161059e9190612f1b565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061067257507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806106825750610681826117c3565b5b9050919050565b606061069433610e60565b67ffffffffffffffff8111156106d3577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156107015781602001602082028036833780820191505090505b509050600080600190505b60075481116107b9573373ffffffffffffffffffffffffffffffffffffffff1661073582610d65565b73ffffffffffffffffffffffffffffffffffffffff1614156107a6578083838151811061078b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505081806107a2906134f2565b9250505b80806107b1906134f2565b91505061070c565b505090565b6060600080546107cd9061348f565b80601f01602080910402602001604051908101604052809291908181526020018280546107f99061348f565b80156108465780601f1061081b57610100808354040283529160200191610846565b820191906000526020600020905b81548152906001019060200180831161082957829003601f168201915b5050505050905090565b600061085b8261182d565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006108a182610d65565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610912576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161090990613098565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610931611878565b73ffffffffffffffffffffffffffffffffffffffff161480610960575061095f8161095a611878565b61172f565b5b61099f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099690613038565b60405180910390fd5b6109a98383611880565b505050565b6109bf6109b9611878565b82611939565b6109fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f5906130b8565b60405180910390fd5b610a098383836119ce565b505050565b606060085467ffffffffffffffff811115610a52577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015610a8b57816020015b610a78612521565b815260200190600190039081610a705790505b50905060005b600854811015610c185760096000600183610aac91906132fa565b815260200190815260200160002060405180608001604052908160008201548152602001600182018054610adf9061348f565b80601f0160208091040260200160405190810160405280929190818152602001828054610b0b9061348f565b8015610b585780601f10610b2d57610100808354040283529160200191610b58565b820191906000526020600020905b815481529060010190602001808311610b3b57829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681525050828281518110610bfa577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101819052508080610c10906134f2565b915050610a91565b5090565b610c24612521565b6009600083815260200190815260200160002060405180608001604052908160008201548152602001600182018054610c5c9061348f565b80601f0160208091040260200160405190810160405280929190818152602001828054610c889061348f565b8015610cd55780601f10610caa57610100808354040283529160200191610cd5565b820191906000526020600020905b815481529060010190602001808311610cb857829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b610d60838383604051806020016040528060008152506113c7565b505050565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0590613078565b60405180910390fd5b80915050919050565b6000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610ed1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ec890612ff8565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000811080610f28575060085481115b15610f5f576040517f6d69e9ca00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003411610f99576040517f9d88b4b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006009600083815260200190815260200160002060405180608001604052908160008201548152602001600182018054610fd39061348f565b80601f0160208091040260200160405190810160405280929190818152602001828054610fff9061348f565b801561104c5780601f106110215761010080835404028352916020019161104c565b820191906000526020600020905b81548152906001019060200180831161102f57829003601f168201915b50505050508152602001600282015481526020016003820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050806060015173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415611121576040517fc6cc468900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806060015173ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f1935050505015801561116b573d6000803e3d6000fd5b5034816040015161117c91906132fa565b81604001818152505080600960008481526020019081526020016000206000820151816000015560208201518160010190805190602001906111bf92919061255f565b506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507fdd87ba58389c04b62ce26b73411af232bbb7ddf11368c03b9238f18a392348ec828260200151836040015184606001516040516112559493929190613161565b60405180910390a15050565b6000600754905090565b61127481610d65565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146112d8576040517f99c6f40300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60606001805461132e9061348f565b80601f016020809104026020016040519081016040528092919081815260200182805461135a9061348f565b80156113a75780601f1061137c576101008083540402835291602001916113a7565b820191906000526020600020905b81548152906001019060200180831161138a57829003601f168201915b5050505050905090565b6113c36113bc611878565b8383611c35565b5050565b6113d86113d2611878565b83611939565b611417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161140e906130b8565b60405180910390fd5b61142384848484611da2565b50505050565b6000600754905090565b600061143e33610e60565b11611475576040517f9d2ca2f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008151116114b0576040517f97a1d26100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600860008154809291906114c3906134f2565b919050555060405180608001604052806008548152602001828152602001600081526020013373ffffffffffffffffffffffffffffffffffffffff1681525060096000600854815260200190815260200160002060008201518160000155602082015181600101908051906020019061153d92919061255f565b506040820151816002015560608201518160030160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509050507f03d0e272ff804e9024b222f7a73f0c1b2deba6c7be8917773bdf62fcb6c3850c600854826000336040516115ca9493929190613115565b60405180910390a150565b60606115e08261182d565b60006006600084815260200190815260200160002080546116009061348f565b80601f016020809104026020016040519081016040528092919081815260200182805461162c9061348f565b80156116795780601f1061164e57610100808354040283529160200191611679565b820191906000526020600020905b81548152906001019060200180831161165c57829003601f168201915b50505050509050600061168a611dfe565b90506000815114156116a05781925050506116e3565b6000825111156116d55780826040516020016116bd929190612e4c565b604051602081830303815290604052925050506116e3565b6116de84611e15565b925050505b919050565b6000600760008154809291906116fd906134f2565b919050555061170e33600754611e7d565b61171a60075483611e9b565b61172560075461126b565b6007549050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61183681611f0f565b611875576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161186c90613078565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166118f383610d65565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061194583610d65565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806119875750611986818561172f565b5b806119c557508373ffffffffffffffffffffffffffffffffffffffff166119ad84610850565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166119ee82610d65565b73ffffffffffffffffffffffffffffffffffffffff1614611a44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3b90612f78565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aab90612fb8565b60405180910390fd5b611abf838383611f7b565b611aca600082611880565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b1a9190613381565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611b7191906132fa565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611c30838383611f80565b505050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611ca4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9b90612fd8565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611d959190612f1b565b60405180910390a3505050565b611dad8484846119ce565b611db984848484611f85565b611df8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611def90612f58565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b6060611e208261182d565b6000611e2a611dfe565b90506000815111611e4a5760405180602001604052806000815250611e75565b80611e548461211c565b604051602001611e65929190612e4c565b6040516020818303038152906040525b915050919050565b611e978282604051806020016040528060008152506122c9565b5050565b611ea482611f0f565b611ee3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611eda90613018565b60405180910390fd5b80600660008481526020019081526020016000209080519060200190611f0a92919061255f565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b6000611fa68473ffffffffffffffffffffffffffffffffffffffff16612324565b1561210f578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611fcf611878565b8786866040518563ffffffff1660e01b8152600401611ff19493929190612e8b565b602060405180830381600087803b15801561200b57600080fd5b505af192505050801561203c57506040513d601f19601f82011682018060405250810190612039919061290b565b60015b6120bf573d806000811461206c576040519150601f19603f3d011682016040523d82523d6000602084013e612071565b606091505b506000815114156120b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ae90612f58565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612114565b600190505b949350505050565b60606000821415612164576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506122c4565b600082905060005b6000821461219657808061217f906134f2565b915050600a8261218f9190613350565b915061216c565b60008167ffffffffffffffff8111156121d8577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561220a5781602001600182028036833780820191505090505b5090505b600085146122bd576001826122239190613381565b9150600a85612232919061353b565b603061223e91906132fa565b60f81b81838151811061227a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856122b69190613350565b945061220e565b8093505050505b919050565b6122d38383612347565b6122e06000848484611f85565b61231f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161231690612f58565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156123b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123ae90613058565b60405180910390fd5b6123c081611f0f565b15612400576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123f790612f98565b60405180910390fd5b61240c60008383611f7b565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461245c91906132fa565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461251d60008383611f80565b5050565b6040518060800160405280600081526020016060815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b82805461256b9061348f565b90600052602060002090601f01602090048101928261258d57600085556125d4565b82601f106125a657805160ff19168380011785556125d4565b828001600101855582156125d4579182015b828111156125d35782518255916020019190600101906125b8565b5b5090506125e191906125e5565b5090565b5b808211156125fe5760008160009055506001016125e6565b5090565b6000612615612610846131d2565b6131ad565b90508281526020810184848401111561262d57600080fd5b61263884828561344d565b509392505050565b600061265361264e84613203565b6131ad565b90508281526020810184848401111561266b57600080fd5b61267684828561344d565b509392505050565b60008135905061268d81613955565b92915050565b6000813590506126a28161396c565b92915050565b6000813590506126b781613983565b92915050565b6000815190506126cc81613983565b92915050565b600082601f8301126126e357600080fd5b81356126f3848260208601612602565b91505092915050565b600082601f83011261270d57600080fd5b813561271d848260208601612640565b91505092915050565b6000813590506127358161399a565b92915050565b60006020828403121561274d57600080fd5b600061275b8482850161267e565b91505092915050565b6000806040838503121561277757600080fd5b60006127858582860161267e565b92505060206127968582860161267e565b9150509250929050565b6000806000606084860312156127b557600080fd5b60006127c38682870161267e565b93505060206127d48682870161267e565b92505060406127e586828701612726565b9150509250925092565b6000806000806080858703121561280557600080fd5b60006128138782880161267e565b94505060206128248782880161267e565b935050604061283587828801612726565b925050606085013567ffffffffffffffff81111561285257600080fd5b61285e878288016126d2565b91505092959194509250565b6000806040838503121561287d57600080fd5b600061288b8582860161267e565b925050602061289c85828601612693565b9150509250929050565b600080604083850312156128b957600080fd5b60006128c78582860161267e565b92505060206128d885828601612726565b9150509250929050565b6000602082840312156128f457600080fd5b6000612902848285016126a8565b91505092915050565b60006020828403121561291d57600080fd5b600061292b848285016126bd565b91505092915050565b60006020828403121561294657600080fd5b600082013567ffffffffffffffff81111561296057600080fd5b61296c848285016126fc565b91505092915050565b60006020828403121561298757600080fd5b600061299584828501612726565b91505092915050565b60006129aa8383612d68565b905092915050565b60006129be8383612e2e565b60208301905092915050565b6129d3816133c7565b82525050565b6129e2816133c7565b82525050565b6129f1816133b5565b82525050565b6000612a0282613254565b612a0c818561329a565b935083602082028501612a1e85613234565b8060005b85811015612a5a5784840389528151612a3b858261299e565b9450612a4683613280565b925060208a01995050600181019050612a22565b50829750879550505050505092915050565b6000612a778261325f565b612a8181856132ab565b9350612a8c83613244565b8060005b83811015612abd578151612aa488826129b2565b9750612aaf8361328d565b925050600181019050612a90565b5085935050505092915050565b612ad3816133d9565b82525050565b6000612ae48261326a565b612aee81856132bc565b9350612afe81856020860161345c565b612b0781613628565b840191505092915050565b612b1b8161343b565b82525050565b6000612b2c82613275565b612b3681856132cd565b9350612b4681856020860161345c565b612b4f81613628565b840191505092915050565b6000612b6582613275565b612b6f81856132de565b9350612b7f81856020860161345c565b612b8881613628565b840191505092915050565b6000612b9e82613275565b612ba881856132ef565b9350612bb881856020860161345c565b80840191505092915050565b6000612bd16032836132de565b9150612bdc82613639565b604082019050919050565b6000612bf46025836132de565b9150612bff82613688565b604082019050919050565b6000612c17601c836132de565b9150612c22826136d7565b602082019050919050565b6000612c3a6024836132de565b9150612c4582613700565b604082019050919050565b6000612c5d6019836132de565b9150612c688261374f565b602082019050919050565b6000612c806029836132de565b9150612c8b82613778565b604082019050919050565b6000612ca3602e836132de565b9150612cae826137c7565b604082019050919050565b6000612cc6603e836132de565b9150612cd182613816565b604082019050919050565b6000612ce96020836132de565b9150612cf482613865565b602082019050919050565b6000612d0c6018836132de565b9150612d178261388e565b602082019050919050565b6000612d2f6021836132de565b9150612d3a826138b7565b604082019050919050565b6000612d52602e836132de565b9150612d5d82613906565b604082019050919050565b6000608083016000830151612d806000860182612e2e565b5060208301518482036020860152612d988282612b21565b9150506040830151612dad6040860182612e2e565b506060830151612dc060608601826129ca565b508091505092915050565b6000608083016000830151612de36000860182612e2e565b5060208301518482036020860152612dfb8282612b21565b9150506040830151612e106040860182612e2e565b506060830151612e2360608601826129ca565b508091505092915050565b612e3781613431565b82525050565b612e4681613431565b82525050565b6000612e588285612b93565b9150612e648284612b93565b91508190509392505050565b6000602082019050612e8560008301846129e8565b92915050565b6000608082019050612ea060008301876129e8565b612ead60208301866129e8565b612eba6040830185612e3d565b8181036060830152612ecc8184612ad9565b905095945050505050565b60006020820190508181036000830152612ef181846129f7565b905092915050565b60006020820190508181036000830152612f138184612a6c565b905092915050565b6000602082019050612f306000830184612aca565b92915050565b60006020820190508181036000830152612f508184612b5a565b905092915050565b60006020820190508181036000830152612f7181612bc4565b9050919050565b60006020820190508181036000830152612f9181612be7565b9050919050565b60006020820190508181036000830152612fb181612c0a565b9050919050565b60006020820190508181036000830152612fd181612c2d565b9050919050565b60006020820190508181036000830152612ff181612c50565b9050919050565b6000602082019050818103600083015261301181612c73565b9050919050565b6000602082019050818103600083015261303181612c96565b9050919050565b6000602082019050818103600083015261305181612cb9565b9050919050565b6000602082019050818103600083015261307181612cdc565b9050919050565b6000602082019050818103600083015261309181612cff565b9050919050565b600060208201905081810360008301526130b181612d22565b9050919050565b600060208201905081810360008301526130d181612d45565b9050919050565b600060208201905081810360008301526130f28184612dcb565b905092915050565b600060208201905061310f6000830184612e3d565b92915050565b600060808201905061312a6000830187612e3d565b818103602083015261313c8186612b5a565b905061314b6040830185612b12565b61315860608301846129d9565b95945050505050565b60006080820190506131766000830187612e3d565b81810360208301526131888186612b5a565b90506131976040830185612e3d565b6131a460608301846129d9565b95945050505050565b60006131b76131c8565b90506131c382826134c1565b919050565b6000604051905090565b600067ffffffffffffffff8211156131ed576131ec6135f9565b5b6131f682613628565b9050602081019050919050565b600067ffffffffffffffff82111561321e5761321d6135f9565b5b61322782613628565b9050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600061330582613431565b915061331083613431565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156133455761334461356c565b5b828201905092915050565b600061335b82613431565b915061336683613431565b9250826133765761337561359b565b5b828204905092915050565b600061338c82613431565b915061339783613431565b9250828210156133aa576133a961356c565b5b828203905092915050565b60006133c082613411565b9050919050565b60006133d282613411565b9050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061344682613431565b9050919050565b82818337600083830152505050565b60005b8381101561347a57808201518184015260208101905061345f565b83811115613489576000848401525b50505050565b600060028204905060018216806134a757607f821691505b602082108114156134bb576134ba6135ca565b5b50919050565b6134ca82613628565b810181811067ffffffffffffffff821117156134e9576134e86135f9565b5b80604052505050565b60006134fd82613431565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156135305761352f61356c565b5b600182019050919050565b600061354682613431565b915061355183613431565b9250826135615761356061359b565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b61395e816133b5565b811461396957600080fd5b50565b613975816133d9565b811461398057600080fd5b50565b61398c816133e5565b811461399757600080fd5b50565b6139a381613431565b81146139ae57600080fd5b5056fea26469706673582212207bb66e26e1e4318c18b3e0ed6d282f47bbe9ef3f188409140d757e6c55e115fe64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/Exactly.sol:Exactly",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 27,
        "contract": "contracts/Exactly.sol:Exactly",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 31,
        "contract": "contracts/Exactly.sol:Exactly",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 35,
        "contract": "contracts/Exactly.sol:Exactly",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 39,
        "contract": "contracts/Exactly.sol:Exactly",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 45,
        "contract": "contracts/Exactly.sol:Exactly",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1013,
        "contract": "contracts/Exactly.sol:Exactly",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 1750,
        "contract": "contracts/Exactly.sol:Exactly",
        "label": "s_tokenCount",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1752,
        "contract": "contracts/Exactly.sol:Exactly",
        "label": "s_postCount",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1757,
        "contract": "contracts/Exactly.sol:Exactly",
        "label": "s_postCountToPost",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Post)1770_storage)"
      },
      {
        "astId": 1761,
        "contract": "contracts/Exactly.sol:Exactly",
        "label": "s_profileToTokenId",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(Post)1770_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Exactly.Post)",
        "numberOfBytes": "32",
        "value": "t_struct(Post)1770_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Post)1770_storage": {
        "encoding": "inplace",
        "label": "struct Exactly.Post",
        "members": [
          {
            "astId": 1763,
            "contract": "contracts/Exactly.sol:Exactly",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1765,
            "contract": "contracts/Exactly.sol:Exactly",
            "label": "hashContent",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 1767,
            "contract": "contracts/Exactly.sol:Exactly",
            "label": "tipAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1769,
            "contract": "contracts/Exactly.sol:Exactly",
            "label": "author",
            "offset": 0,
            "slot": "3",
            "type": "t_address_payable"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}